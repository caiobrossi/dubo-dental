const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://fdjelequldsybdzjlyuz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZkamVsZXF1bGRzeWJkempseXV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyOTU1NzUsImV4cCI6MjA3MTg3MTU3NX0.0WpLs4WO1Gm4IdZwbLLGSJv7ub73lS3o2wlESz4Xhfk';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPatientCreation() {
  console.log('üîç Testando cria√ß√£o de pacientes...\n');

  try {
    // 1. Verificar se RLS est√° desabilitado
    console.log('1Ô∏è‚É£ Verificando status do RLS...');
    
    // 2. Tentar criar paciente com apenas o nome
    console.log('2Ô∏è‚É£ Testando cria√ß√£o com apenas o nome...');
    
    const testPatient = {
      name: 'Paciente Teste ' + Date.now()
    };

    console.log('üìù Dados de teste:', testPatient);

    const { data: insertData, error: insertError } = await supabase
      .from('patients')
      .insert([testPatient])
      .select();

    if (insertError) {
      console.error('‚ùå Erro ao inserir paciente:', insertError);
      console.error('üîç Detalhes do erro:', {
        message: insertError.message,
        details: insertError.details,
        hint: insertError.hint,
        code: insertError.code
      });
      
      // 3. Se der erro, verificar se √© RLS
      if (insertError.code === '42501') {
        console.log('\nüö® PROBLEMA IDENTIFICADO: RLS ainda est√° ativo!');
        console.log('üí° Execute este SQL no Supabase:');
        console.log('ALTER TABLE patients DISABLE ROW LEVEL SECURITY;');
      }
      
      return;
    }

    console.log('‚úÖ Paciente inserido com sucesso!');
    console.log('üìä Dados inseridos:', insertData);

    // 4. Verificar se o paciente foi realmente criado
    console.log('\n4Ô∏è‚É£ Verificando se o paciente foi criado...');
    const { data: checkData, error: checkError } = await supabase
      .from('patients')
      .select('*')
      .eq('id', insertData[0].id);

    if (checkError) {
      console.error('‚ùå Erro ao verificar paciente:', checkError);
    } else {
      console.log('‚úÖ Paciente encontrado no banco:', checkData[0]);
    }

    // 5. Limpar dados de teste
    console.log('\n5Ô∏è‚É£ Limpando dados de teste...');
    if (insertData && insertData[0]) {
      const { error: deleteError } = await supabase
        .from('patients')
        .delete()
        .eq('id', insertData[0].id);

      if (deleteError) {
        console.error('‚ö†Ô∏è Erro ao limpar dados de teste:', deleteError);
      } else {
        console.log('‚úÖ Dados de teste removidos!');
      }
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testPatientCreation();

